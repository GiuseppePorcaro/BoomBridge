/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class ContactListener {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ContactListener(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ContactListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(ContactListener obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_ContactListener(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void beginContact(Contact contact) {
    liquidfunJNI.ContactListener_beginContact__SWIG_0(swigCPtr, this, Contact.getCPtr(contact), contact);
  }

  public void endContact(Contact contact) {
    liquidfunJNI.ContactListener_endContact__SWIG_0(swigCPtr, this, Contact.getCPtr(contact), contact);
  }

  public void beginContact(ParticleSystem particleSystem, ParticleBodyContact particleBodyContact) {
    liquidfunJNI.ContactListener_beginContact__SWIG_1(swigCPtr, this, ParticleSystem.getCPtr(particleSystem), particleSystem, ParticleBodyContact.getCPtr(particleBodyContact), particleBodyContact);
  }

  public void endContact(Fixture fixture, ParticleSystem particleSystem, int index) {
    liquidfunJNI.ContactListener_endContact__SWIG_1(swigCPtr, this, Fixture.getCPtr(fixture), fixture, ParticleSystem.getCPtr(particleSystem), particleSystem, index);
  }

  public void beginContact(ParticleSystem particleSystem, ParticleContact particleContact) {
    liquidfunJNI.ContactListener_beginContact__SWIG_2(swigCPtr, this, ParticleSystem.getCPtr(particleSystem), particleSystem, ParticleContact.getCPtr(particleContact), particleContact);
  }

  public void endContact(ParticleSystem particleSystem, int indexA, int indexB) {
    liquidfunJNI.ContactListener_endContact__SWIG_2(swigCPtr, this, ParticleSystem.getCPtr(particleSystem), particleSystem, indexA, indexB);
  }

  public void preSolve(Contact contact, Manifold oldManifold) {
    liquidfunJNI.ContactListener_preSolve(swigCPtr, this, Contact.getCPtr(contact), contact, Manifold.getCPtr(oldManifold), oldManifold);
  }

  public void postSolve(Contact contact, ContactImpulse impulse) {
    liquidfunJNI.ContactListener_postSolve(swigCPtr, this, Contact.getCPtr(contact), contact, ContactImpulse.getCPtr(impulse), impulse);
  }

  public ContactListener() {
    this(liquidfunJNI.new_ContactListener(), true);
  }

}
