/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class ContactFilter {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ContactFilter(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ContactFilter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(ContactFilter obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_ContactFilter(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public boolean shouldCollide(Fixture fixtureA, Fixture fixtureB) {
    return liquidfunJNI.ContactFilter_shouldCollide__SWIG_0(swigCPtr, this, Fixture.getCPtr(fixtureA), fixtureA, Fixture.getCPtr(fixtureB), fixtureB);
  }

  public boolean shouldCollide(Fixture fixture, ParticleSystem particleSystem, int particleIndex) {
    return liquidfunJNI.ContactFilter_shouldCollide__SWIG_1(swigCPtr, this, Fixture.getCPtr(fixture), fixture, ParticleSystem.getCPtr(particleSystem), particleSystem, particleIndex);
  }

  public boolean shouldCollide(ParticleSystem particleSystem, int particleIndexA, int particleIndexB) {
    return liquidfunJNI.ContactFilter_shouldCollide__SWIG_2(swigCPtr, this, ParticleSystem.getCPtr(particleSystem), particleSystem, particleIndexA, particleIndexB);
  }

  public ContactFilter() {
    this(liquidfunJNI.new_ContactFilter(), true);
  }

}
